const User = require("../models/user.model");
const bcrypt = require("bcryptjs");

function getLogin(req, res) {
  const { err } = req.query;
  res.render("login", { err });
}

function getSignup(req, res) {
  const { err } = req.query;
  res.render("signup", { err });
}

const emailRegex = /^\S+@\S+\.\S+$/;
const passwordRegex = /(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{6,}/;

function isValidationError(error) {
  return error instanceof mongoose.Error.ValidationError;
}

function isMongoError(error) {
  return error.code === 11000;
}

function hasWrongFormat(email, password) {
  return !email.test(emailRegex) || !password.test(passwordRegex);
}

async function signup(req, res) {
  try {
    const { email, password } = req.body;
    const hasMissingCredentials = !email || !password;

    if (hasWrongFormat(email, password)) {
      return res.redirect("/signup?err=Wrong format");
    }
    if (hasMissingCredentials) {
      return res.redirect("/signup?err=Missing credentials");
    }
    // salt rounds is a number from 0 to 20 that defines the complexity of the salt
    const saltRounds = 10;
    // the salt is a random string generated by bcrypt to add complexity in the hash
    const salt = await bcrypt.genSalt(saltRounds);
    // create the hash out of the password and the salt
    const hashedPassword = await bcrypt.hash(password, salt);
    const newUser = await User.create({ email, password: hashedPassword });
    console.log("user", newUser);
    res.redirect("/private");
  } catch (err) {
    return res.redirect("/signup?err=Something went wrong");
  }
}

async function login(req, res) {
  try {
    const { email, password } = req.body;
    const hasMissingCredentials = !email || !password;
    if (hasMissingCredentials) {
      return res.redirect("/login?err=Missing credentials");
    }
    const user = await User.findOne({ email });
    if (!user) {
      return res.redirect("/login?err=Something went wrong");
    }
    const verify = await bcrypt.compare(password, user.password);
    if (verify) {
      req.session.currentUser = user;
      return res.redirect("/");
    }
    return res.redirect("/login?err=Something went wrong");
  } catch (err) {
    return res.redirect("/login?err=Something went wrong");
  }
}

async function logout(req, res) {
  try {
    await req.session.destroy();
  } catch (err) {
    console.error(err);
  }
}

module.exports = { getLogin, getSignup, login, signup };
